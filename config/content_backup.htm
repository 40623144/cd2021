<h1>About</h1>
<p>班級:四設計四甲</p>
<p>學號:40623144</p>
<p>姓名:林昭權</p>
<p><a href="https://github.com/40623144/cd2021">個人倉儲</a></p>
<p>stage-1</p>
<p><a href="https://github.com/40623144/stage1-bg23">分組倉儲</a></p>
<p>stage-2</p>
<p><a href="https://github.com/40623144/stage2-bg8">分組倉儲</a></p>
<p>stage-3</p>
<p><a href="https://40623144.github.io/stage3-bg7/content/index.html">分組倉儲</a></p>
<h2>stage-1-bg23</h2>
<p>組員:40723224</p>
<p><a href="https://github.com/s40723224/cd2021">組員倉儲</a></p>
<p><a href="https://s40723224.github.io/cd2021/content/index.html">組員網站</a></p>
<h2>stage-2-bg8</h2>
<p>組員:40723224</p>
<p><a href="https://github.com/s40723224/cd2021">組員倉儲</a></p>
<p><a href="https://s40723224.github.io/cd2021/content/index.html">組員網站</a></p>
<p><span>組員:</span>40423155</p>
<p><a href="https://github.com/40423155/cd2021">組員倉儲</a></p>
<p><a href="http://40423155.github.io/cd2021">組員網站</a></p>
<p><span>組員:40823223</span></p>
<p><a href="https://github.com/40823233/cd2021">組員倉儲</a></p>
<p><a href="https://40823233.github.io/cd2021/content/index.html">組員網站</a></p>
<h2>stage-3-bg7</h2>
<p>組員:40723224</p>
<p><a href="https://github.com/s40723224/cd2021">組員倉儲</a></p>
<p><a href="https://s40723224.github.io/cd2021/content/index.html">組員網站</a></p>
<p><span>組員:</span>40423155</p>
<p><a href="https://github.com/40423155/cd2021">組員倉儲</a></p>
<p><a href="http://40423155.github.io/cd2021">組員網站</a></p>
<p><span>組員:40823223</span></p>
<p><a href="https://github.com/40823233/cd2021">組員倉儲</a></p>
<p><a href="https://40823233.github.io/cd2021/content/index.html">組員網站</a></p>
<p><span>組員:40823227</span></p>
<p><a href="https://github.com/40823227/cd2021">組員倉儲</a></p>
<p><a href="https://40823227.github.io/cd2021/content/index.html">組員網站</a></p>
<p><span>組員:40723233</span></p>
<p><a href="https://github.com/s40723233/cd2021">組員倉儲</a></p>
<p><a href="https://s40723233.github.io/cd2021/content/index.html">組員網站</a></p>
<h1>week</h1>
<p>每周進度</p>
<p><a href="https://40623144.github.io/cd2021/content/week1.html">week1</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week2.html">week2</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week3.html">week3</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week4.html">week4</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week5.html">week5</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week6.html">week6</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week7.html">week7</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week8.html">week8</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week9.html">week9</a></p>
<h2>week1</h2>
<p>建立倉儲 cd2021</p>
<p>1.到達老師倉儲下的cmstemplate，點選use this template</p>
<p>2.將名稱取為cd2021即可</p>
<p>debug leo</p>
<p>1.到Y槽的home_ipv6裡的.leo的資料夾</p>
<p>2.新增.leoID.txt</p>
<p>3.在 <span>.leoID.txt輸入leo即可</span></p>
<p><span>4.新增第一週影片</span></p>
<h2>week2~4</h2>
<p><a href="https://40623144.github.io/cd2021/content/week2.html">week2</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week3.html">week3</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week4.html">week4</a></p>
<h3>week2</h3>
<p>1.討論題目</p>
<p>原本題目打算選擇火車頭，但是後來發現已經有人選擇了，所以就改成了簡易自行車。</p>
<p>2.討論使用的程式</p>
<p><span>繪圖上使用onshape，因為比較容易進行同步改版。</span></p>
<p><span>3.進行網站維護</span></p>
<p><span>新增第二週影片</span></p>
<p><span>整理網站排序</span></p>
<h3>week3</h3>
<p>利用<span>CoppeliaSim進行模擬</span></p>
<h4><span>模擬步驟</span></h4>
<p><span>1.開啟想要模擬的檔案</span></p>
<p>File&gt;Import&gt;Mesh</p>
<p><img alt="" height="314" src="/images/coppeliaSim_LhHMRc1ibw.png" width="558"/></p>
<p><img alt="" height="314" src="/images/1.png" width="560"/></p>
<p><img alt="" height="469" src="/images/2.png" width="418"/></p>
<p>2.移動到想要的位置</p>
<p>Object/item shift</p>
<p><img alt="" height="314" src="/images/coppeliaSim_EzU8d9ZvMt.png" width="560"/></p>
<p>將移動方向設為Z軸</p>
<p><img alt="" height="244" src="/images/3.png" width="474"/></p>
<p>將組合件拉至不會跟地板干涉</p>
<p><img alt="" height="560" src="/images/4.png" width="500"/></p>
<p>3.將組合件拆成多個零件</p>
<p>對組合件按右鍵 Edit&gt;Grouping/Merging&gt;Divide selected shape</p>
<p><img alt="" height="314" src="/images/coppeliaSim_tLMxLBa2fN.png" width="560"/></p>
<p>4.將兩個踏板合成一個零件</p>
<p><span>按住shift點選兩個踏板&gt;按右鍵 Edit&gt;Grouping/Merging&gt;Merge selected shape</span></p>
<p><img alt="" height="314" src="/images/coppeliaSim_Z6GLuV75TO.png" width="560"/></p>
<p>5.新增旋轉軸</p>
<p>在空白處點選右鍵&gt;Add&gt;Joint&gt;Revolute</p>
<p><img alt="" height="616" src="/images/5.png" width="594"/></p>
<p>6.將旋轉軸定位並給予轉速</p>
<p><span>按住shift點選前輪和旋轉軸&gt;</span><span>點選Object/item Translation&gt;Position&gt;Apply to selection</span></p>
<p><span><img alt="" height="314" src="/images/uJpUPk41o5.png" width="560"/></span></p>
<p><span><img alt="" height="314" src="/images/ERVT4YAL77.png" width="560"/></span></p>
<p><span>點選旋轉軸&gt;Object/item Rotation/Orientation&gt;Rotation&gt;Own frame&gt;在X軸輸入90&gt;Rotate selection</span></p>
<p><span><img alt="" height="314" src="/images/RRfE5zvkrG.png" width="560"/></span></p>
<p><span>點兩下旋轉軸名稱前的圖示&gt;Show dynamic properties dialog</span></p>
<p><span>如果旋轉軸太小的話，可以修改Length(長度)跟Diameter(直徑)</span></p>
<p><span><img alt="" height="684" src="/images/6.png" width="563"/></span></p>
<p><span>將Motor properties和Lock motor when target velocity is zero打勾，並賦予速度</span></p>
<p><span><img alt="" height="633" src="/images/7.png" width="579"/></span></p>
<p><span>7.幫後輪跟踏板加上旋轉軸</span></p>
<p><span>將旋轉軸複製兩根，並分配給後輪跟踏板</span></p>
<p><span><img alt="" height="314" src="/images/coppeliaSim_RugIJRAHCy.png" width="560"/></span></p>
<p><span>按住shift點選後輪和第二根旋轉軸&gt;</span><span>點選Object/item Translation&gt;Position&gt;Apply to selection</span></p>
<p><span><img alt="" height="314" src="/images/10TicPW3MF.png" width="560"/></span></p>
<p><span>按住shift點選踏板和第三根旋轉軸&gt;<span>點選Object/item Translation&gt;Position&gt;Apply to selection</span></span></p>
<p><span><span><img alt="" height="314" src="/images/yrFFijE4yZ.png" width="560"/></span></span></p>
<p><span><span>8.零件組合</span></span></p>
<p><span><span>將前輪、後輪、踏板家道各自的旋轉軸分支下</span></span></p>
<p><span><span><img alt="" height="314" src="/images/coppeliaSim_Z24Exw7Goz.png" width="560"/></span></span></p>
<p><span><span>按住shift點選不在旋轉軸分支下的零件&gt;按右鍵 Edit&gt;Grouping/Merging&gt;Merge selected shape</span></span></p>
<p><span><span><img alt="" height="314" src="/images/coppeliaSim_95O5g9nzUG.png" width="558"/></span></span></p>
<p><span><span>再將三個旋轉軸加到組合件的分支下</span></span></p>
<p><span><span><img alt="" height="314" src="/images/coppeliaSim_zQPKjUWXVs.png" width="560"/></span></span></p>
<p><span><span>9.設定動態特性</span></span></p>
<p><span><span>點兩下組合件名稱前的圖示&gt;Show dynamic properties dialog</span></span></p>
<p><span><span><img alt="" height="735" src="/images/8.png" width="654"/></span></span></p>
<p><span><span>勾選Body is dynarnic<img alt="" height="749" src="/images/9.png" width="545"/></span></span></p>
<p><span><span>點兩下前輪、後輪、踏板名稱前的圖示&gt;Show dynamic properties dialog</span></span></p>
<p><span><span><img alt="" height="735" src="/images/8.png" width="654"/></span></span></p>
<p><span><span>勾選Body is resp</span></span><span>ondable和Body is dynarnic</span></p>
<p><span><span><img alt="" height="767" src="/images/10.png" width="562"/></span></span></p>
<p><span><span>10.進行模擬</span></span></p>
<p><span><span><img alt="" height="314" src="/images/coppeliaSim_XKJkcxyHQl.png" width="560"/></span></span></p>
<h3>week4</h3>
<p>第一階段報告</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/lewPjCuxovA" width="560"></iframe></p>
<h2>week5~9</h2>
<p><a href="https://40623144.github.io/cd2021/content/week5.html">week5</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week6.html">week6</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week7.html">week7</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week8.html">week8</a></p>
<p><a href="https://40623144.github.io/cd2021/content/week9.html">week9</a></p>
<h3>week5</h3>
<p>1.stage-2分組</p>
<p>2.整理乙班影片</p>
<p>在cmd裡輸入<span>pip install moviepy</span></p>
<p>到老師cd2021裡w4的最下面複製兩段程式碼到SciTE進行執行即可</p>
<h3>week6</h3>
<p>確定題目</p>
<p>開始繪圖及收集資料</p>
<h3>week7</h3>
<p>確認繪圖進度</p>
<p>查看參考資料思考如何模擬</p>
<h3>week8</h3>
<p><span>利用</span><span>CoppeliaSim進行模擬，但在模擬時萬用軸並沒有照著軌道的路移動，而是在原地旋轉，再測試了一段時間後，還是沒有成功，所以就先交給另一位組員用soildworks模擬看看是否成功。</span></p>
<h3>week9</h3>
<p><span>第二階段報告 期中報告</span></p>
<h2>week10~17</h2>
<h3>week10</h3>
<h3>week11</h3>
<p>直播</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="https://www.youtube.com/embed/bjHveMUpdx4" width="560"></iframe></p>
<h3>week12</h3>
<p>直播</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="https://www.youtube.com/embed/w-PMVvAl2bg" width="560"></iframe></p>
<h3>week13</h3>
<h4>RoboDk 機械手臂</h4>
<p><a href="https://40623144.github.io/cd2021/content/%E7%AC%AC%E5%8D%81%E4%B8%89%E9%80%B1.html">模擬影片</a></p>
<p>程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *
from robodk import *

import os

dir_path = os.path.dirname(os.path.realpath(__file__))
print(dir_path)
# Calculate pyramid coordinate

# Setup global parameters
BALL_DIAMETER = 100 # diameter of one ball
APPROACH = 100 # approach distance to grab each part, in mm
nTCPs = 6 # number of TCP's in the tool

def pyramid_calc(BALLS_SIDE=4):
"""Calculate a list of points (ball center) as if the balls were place in a pyramid"""
#the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
#BALL_DIAMETER = 100
xyz_list = []
sqrt2 = 2**(0.5)
for h in range(BALLS_SIDE):
for i in range(BALLS_SIDE-h):
for j in range(BALLS_SIDE-h):
height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
return xyz_list

def TCP_On(toolitem, tcp_id):
"""Attach the closest object to the toolitem Htool pose,
furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""
toolitem.AttachClosest()
toolitem.RDK().RunMessage('Set air valve %i on' % (tcp_id+1))
toolitem.RDK().RunProgram('TCP_On(%i)' % (tcp_id+1));

def TCP_Off(toolitem, tcp_id, itemleave=0):
"""Detaches the closest object attached to the toolitem Htool pose,
furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""
toolitem.DetachAll(itemleave)
toolitem.RDK().RunMessage('Set air valve %i off' % (tcp_id+1))
toolitem.RDK().RunProgram('TCP_Off(%i)' % (tcp_id+1));

# Make a list of positions to place the objects
balls_list = pyramid_calc(4)

#print(len(frame1_list))
# 4*4 = 16
# 3*3 = 9
# 2*2 = 4
# 1+4+9+16 = 30

# height 50*sqrt(2)
'''
[

[50.0, 50.0, 50.0], [50.0, 150.0, 50.0], [50.0, 250.0, 50.0], [50.0, 350.0, 50.0],

[150.0, 50.0, 50.0], [150.0, 150.0, 50.0], [150.0, 250.0, 50.0], [150.0, 350.0, 50.0],

[250.0, 50.0, 50.0], [250.0, 150.0, 50.0], [250.0, 250.0, 50.0], [250.0, 350.0, 50.0],

[350.0, 50.0, 50.0], [350.0, 150.0, 50.0], [350.0, 250.0, 50.0], [350.0, 350.0, 50.0],


[100.0, 100.0, 120.71067811865474], [100.0, 200.0, 120.71067811865474], [100.0, 300.0, 120.71067811865474],

[200.0, 100.0, 120.71067811865474], [200.0, 200.0, 120.71067811865474], [200.0, 300.0, 120.71067811865474],

[300.0, 100.0, 120.71067811865474], [300.0, 200.0, 120.71067811865474], [300.0, 300.0, 120.71067811865474],


[150.0, 150.0, 191.42135623730948], [150.0, 250.0, 191.42135623730948],

[250.0, 150.0, 191.42135623730948], [250.0, 250.0, 191.42135623730948],


[200.0, 200.0, 262.13203435596427]

]

'''
# https://github.com/RoboDK/RoboDK-API/blob/master/Python/robolink.py
# robodk_path variable to specify location of RoboDK.exe
# under Ubuntu can not use "-NEWINSTANCE"
'''
start_robodk.sh content
LD_LIBRARY_PATH="/home/yen/RoboDK/bin/lib"
export LD_LIBRARY_PATH
/home/yen/RoboDK/bin/RoboDK
'''
RDK = Robolink(robodk_path=r"Y:\robodk522_portable\bin\RoboDK.exe",args=["-SKIPINI", "-EXIT_LAST_COM"])
# Add robot and the accompanied Base coordinate
print(dir_path + '/Fanuc-M-710iC-50.robot')
# relative directory or absolute directory will work for AddFile under Ubuntu
#robot = RDK.AddFile(r"/home/yen/github/wcm2021/downloads/robodk/pick_and_place_kmol_mac/Fanuc-M-710iC-50.robot")
robot = RDK.AddFile('Fanuc-M-710iC-50.robot')
# Get the default robot base frame
robot_frame = RDK.Item('Fanuc M-710iC/50 Base')
# Move the base frame to the origin
robot_frame.setPose(transl(0,0,0))

# Add a tool to an existing robot:
tool = RDK.AddFile(dir_path + '/MainTool.tool', robot)

# Add table 1
table1_frame = RDK.AddFrame('Table 1')
table1_frame.setPose(transl(807.766544,-963.699898,41.478944))
table1_stl = RDK.AddFile(dir_path + '/Table.stl', table1_frame)

# Add table 2
table2_frame = RDK.AddFrame('Table 2')
table2_frame.setPose(transl(926.465508,337.151529,94.871928))
table2_stl = RDK.AddFile(dir_path + '/Table.stl', table2_frame)

# Calculate tool frames for the suction cup tool of 6 suction cups
TCP_list = []
for i in range(nTCPs):
TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)
TCPi = robot.AddTool(TCPi_pose, 'TCP %i' % (i+1))
TCP_list.append(TCPi)

TCP_0 = TCP_list[0]

# Turn on automatic rendering
RDK.Render(True)

# Add balls
# create a list with 30 elements
balls = [None for _ in range(30)]
layer = [16, 9, 4, 1]
count = 0
for i in range(len(balls_list)):
# transl(balls_list)
balls[i] = RDK.AddFile('./ball.stl', table1_frame)
balls[i].setPose(transl(balls_list[i]))
count = count + 1
if count &lt;= 16:
balls[i].setColor([1, 0, 0])
elif count &gt; 16 and count &lt;= 25:
balls[i].setColor([0, 1, 0])
elif count &gt; 25 and count &lt;=29:
balls[i].setColor([1, 1, 0])
else:
balls[i].setColor([0, 0, 1])

# Make a list of positions to place the objects
# ball_list is the same as frame1_list
frame1_list = pyramid_calc(4)
frame2_list = pyramid_calc(4)

# Move balls
robot.setPoseTool(TCP_list[0])
nballs_frame1 = len(frame1_list)
nballs_frame2 = len(frame2_list)
idTake = nballs_frame1 - 1
idLeave = 0
idTCP = 0

target_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)

# frame1 is the same as table1_frame
frame1 = RDK.Item('Table 1')
frame2 = RDK.Item('Table 2')

while idTake &gt;= 0:
# ------------------------------------------------------------------
# first priority: grab as many balls as possible
# the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)
ntake = min(nTCPs, idTake + 1)

# approach to frame 1
robot.setPoseFrame(frame1)
robot.setPoseTool(TCP_0)
robot.MoveJ([0,0,0,0,10,-200])
robot.MoveJ(target_app_frame)

# grab ntake balls from frame1
for i in range(ntake):
TCPi = TCP_list[i]
robot.setPoseTool(TCPi)
# calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted
target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)
target_app = target*transl(0,0,-APPROACH)
idTake = idTake - 1
robot.MoveL(target_app)
robot.MoveL(target)
TCP_On(TCPi, i)
robot.MoveL(target_app)

# ------------------------------------------------------------------
# second priority: unload the tool
# approach to frame2 and place the tool balls into table2
robot.setPoseTool(TCP_0)
robot.MoveJ(target_app_frame)
robot.MoveJ([0,0,0,0,10,-200])
robot.setPoseFrame(frame2)
robot.MoveJ(target_app_frame)
for i in range(ntake):
TCPi = TCP_list[i]
robot.setPoseTool(TCPi)
if idLeave &gt; nballs_frame2-1:
raise Exception("No room left to place objects in Table 2")

# calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted
target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)
target_app = target*transl(0,0,-APPROACH)
idLeave = idLeave + 1
robot.MoveL(target_app)
robot.MoveL(target)
TCP_Off(TCPi, i, frame2)
robot.MoveL(target_app)

robot.MoveJ(target_app_frame)

# Move home when the robot finishes
robot.MoveJ([0,0,0,0,10,-200])</pre>
<p><br/><br/></p>
<h3>week14</h3>
<p>tesk1</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def stu2b(account):
 return account
teamb = []
  
with open("stage3_2b.txt") as fh:     #讀取stage3_2b的檔案
    data = fh.readlines()
    data = [a.replace('40823231','40823231-2') for a in data]      #將40823231換成40823231-2
    data = [a.replace('407','s407') for a in data]     #將有407的學號換成s407
 
for i in range(len(data)):     #數據中會有\n跟\t，將\n跟\t去除
    group = data[i].rstrip("\n").split("\t")
    teamb.append(group)
      
output = ""    
seperator = "-"*10 + "&lt;/br&gt;"     #分隔號製作
  
for i in teamb[0:]:    #小組 組長 其他六個組員
    team = i[0]
    leader = stu2b(i[1])
    m1 = stu2b(i[3])
    m2 = stu2b(i[5])
    m3 = stu2b(i[7])
    m4 = stu2b(i[9])
    m5 = stu2b(i[11])
    m6 = stu2b(i[13])
 
          
    leaderrepo = "&lt;a href='http://github.com/" + leader + "/cd2021'&gt;" + leader + " repo&lt;/a&gt;"    #組長以及組員的倉儲和網站
    leadersite = "&lt;a href='http://" + leader + ".github.io/cd2021'&gt;" + leader +  " site&lt;/a&gt;"
    m1repo = "&lt;a href='http://github.com/" + m1 + "/cd2021'&gt;" + m1 + " repo&lt;/a&gt;"
    m1site = "&lt;a href='http://" + m1 + ".github.io/cd2021'&gt;" + m1 +  " site&lt;/a&gt;"
    m2repo = "&lt;a href='http://github.com/" + m2 + "/cd2021'&gt;" + m2 + " repo&lt;/a&gt;"
    m2site = "&lt;a href='http://" + m2 + ".github.io/cd2021'&gt;" + m2 +  " site&lt;/a&gt;"
    m3repo = "&lt;a href='http://github.com/" + m3 + "/cd2021'&gt;" + m3 + " repo&lt;/a&gt;"
    m3site = "&lt;a href='http://" + m3 + ".github.io/cd2021'&gt;" + m3 +  " site&lt;/a&gt;"
    m4repo = "&lt;a href='http://github.com/" + m4 + "/cd2021'&gt;" + m4 + " repo&lt;/a&gt;"
    m4site = "&lt;a href='http://" + m4 + ".github.io/cd2021'&gt;" + m4 +  " site&lt;/a&gt;"
    m5repo = "&lt;a href='http://github.com/" + m5 + "/cd2021'&gt;" + m5 + " repo&lt;/a&gt;"
    m5site = "&lt;a href='http://" + m5 + ".github.io/cd2021'&gt;" + m5 +  " site&lt;/a&gt;"
    m6repo = "&lt;a href='http://github.com/" + m6 + "/cd2021'&gt;" + m6 + " repo&lt;/a&gt;"
    m6site = "&lt;a href='http://" + m6 + ".github.io/cd2021'&gt;" + m6 +  " site&lt;/a&gt;"
   
  
    teamrepo = "&lt;a href='http://github.com/" + leader + "/" + team + "'&gt;" + team + " repo&lt;/a&gt;"     #小組的倉儲含網站
    teamsite =  "&lt;a href='http://" + m1 + ".github.io/" + team + "'&gt;" + team +  " site&lt;/a&gt;"
  
    output += teamrepo + " | " + teamsite + " | " +leaderrepo + " | " + leadersite + " | " +m1repo + " | " + m1site + " | " +m2repo + " | " + m2site + " | " +m3repo + " | " + m3site + " | " +m4repo + " | " + m4site + " | " +m5repo + " | " + m5site + " | " +m6repo + " | " + m6site 
      
           
    try:
        m7 = stu2b(i[15])     #第七個組員
    except:
        m7 = ""
    try:
        m8 = stu2b(i[17])     #第八個組員
    except:
        m8 = ""
         
    if m7 != "":
       m7repo = "&lt;a href='http://github.com/" + m7 + "/cd2021'&gt;" + m7 + " repo&lt;/a&gt;"     #如果有第七個組員會再加倉儲和網站沒有的話就空白
       m7site = "&lt;a href='http://" + m7 + ".github.io/cd2021'&gt;" + m7 +  " site&lt;/a&gt;"  
       output += " |  " + m7repo + "| " + m7site
    else:
        output += "" 
      
    if m8 != "":
       m8repo = "&lt;a href='http://github.com/" + m8 + "/cd2021'&gt;" + m8 + " repo&lt;/a&gt;"     #如果有第八個組員會再加倉儲和網站最後再加分隔線
       m8site = "&lt;a href='http://" + m8 + ".github.io/cd2021'&gt;" + m8 +  " site&lt;/a&gt;"  
       output += " |  " + m8repo + "| " + m8site + "&lt;br /&gt;" + seperator
    else:
        output += "&lt;br /&gt;" + seperator
  
  
print(output)     #輸出</pre>
<h3>week15</h3>
<p>影片1</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/IKOGwoJ2HLk" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>我們在前面看到了這個簡單的雙連桿機器人<br/>關於正向運動學的講座。</p>
<p>描述了該機器人的工具提示位姿<br/>簡單地由兩個數字，坐標 x 和</p>
<p>y 相對於世界坐標系。</p>
<p>所以，這里的問題是，給定 x 和 y，<br/>我們要確定連接的角度 Q1</p>
<p>和 Q2。</p>
<p>我們將遵循的解決方案<br/>在這個特定的部分是一個幾何</p>
<p>一。</p>
<p>我們將從一個簡單的作品開始<br/>的建設。</p>
<p>我們將覆蓋紅色三角形<br/>在我們的機器人之上。</p>
<p>我們知道終點坐標是x，<br/>y，所以三角形的垂直高度</p>
<p>是 y，水平寬度是 x。</p>
<p>並且，使用畢達哥拉斯定理，我們可以寫出<br/>r 平方等於 x 平方加上 y 平方。</p>
<p>到目前為止，很容易。</p>
<p>現在，我們要看看這個三角形<br/>此處以紅色突出顯示，我們想確定</p>
<p>角度α。</p>
<p>為了做到這一點，我們需要使用余弦<br/>規則。</p>
<p>而且，如果你對余弦有點生疏<br/>規則，這里有一點覆習。</p>
<p>我們有一個任意三角形。</p>
<p>我們不必有任何直角<br/>它，我們將標記長度</p>
<p>這條邊作為 A 和相反的角度<br/>邊緣，我們將標記為小 a。</p>
<p>而且，我們對這條邊和這條邊做同樣的事情<br/>角度，還有這條邊和這個角。</p>
<p>所以，總而言之，雙方都被標記為首都<br/>A、B 和 C，角度標記為小</p>
<p>a、小b和小c。</p>
<p>所以，余弦規則就是這種關系<br/>這里。</p>
<p>這有點像畢達哥拉斯定理，除了<br/>對於這個額外的術語，最後的 cos</p>
<p>一個在里面。</p>
<p>現在，讓我們將余弦規則應用於<br/>我們看了一會兒特定的三角形</p>
<p>前。</p>
<p>寫下來很簡單<br/>這種特殊的關系。</p>
<p>我們可以隔離術語 cos alpha，它給出<br/>我們感興趣的角度α</p>
<p>在。</p>
<p>而且，它是根據常數定義的<br/>鏈接長度，A1 和 A2 以及位置</p>
<p>末端執行器，x 和 y。</p>
<p>我們可以寫出這個簡單的關系<br/>角α和Q2。</p>
<p>而且，我們從余弦的形狀知道<br/>Q2 的 cos 必須等於負的函數</p>
<p>cos 阿爾法。</p>
<p>這一次，我們只寫一個表達式<br/>對於連接角 Q2 的余弦。</p>
<p>現在，我們要再畫一個紅色<br/>三角形，我們將應用一些簡單的</p>
<p>三角函數在這里。</p>
<p>如果我們知道 Q2，那麽我們就知道這個長度和<br/>這個紅色三角形的長度。</p>
<p>我們可以把這個關系寫成正弦<br/>的連接角 Q2。</p>
<p>現在，我們可以考慮這個更大的三角形<br/>其角為β，此邊長為</p>
<p>三角形在這里以藍色給出。</p>
<p>並且，三角形另一邊的長度<br/>這是。</p>
<p>所以，現在我們可以寫一個表達式<br/>此處的這些參數的角度β。</p>
<p>回到我們畫的紅色三角形<br/>之前，我們可以建立之間的關系</p>
<p>Q1 和角β。</p>
<p>介紹另一個角度，這個伽馬<br/>我們可以寫出之間的關系</p>
<p>角度伽馬和工具提示坐標 x<br/>和y。</p>
<p>現在，我們可以寫出一個簡單的關系<br/>我們構建的角度，伽馬</p>
<p>和 beta 以及我們感興趣的連接角<br/>其中是 Q1。</p>
<p>而且，總的關系看起來有些東西<br/>像這樣。</p>
<p>相當覆雜的關系，它給了我們<br/>連接的角度，即 Q1</p>
<p>末端執行器坐標 y 和 x，以及<br/>一堆常量，a1 和 a2，它是</p>
<p>也是第二關節角度的函數，<br/>Q2。</p>
<p>所以，讓我們總結一下我們有什麽<br/>派生於此。</p>
<p>我們有 Q2 的余弦表達式<br/>我們有 Q1 的表達式。</p>
<p>現在，余弦函數關於<br/>0.</p>
<p>所以，如果我們知道余弦值<br/>Q2，那麽有兩種可能的解決方案，</p>
<p>一個正角和一個負角。</p>
<p>我們將明確選擇積極的<br/>角度，這意味著我可以寫出這個表達式</p>
<p>這里。</p>
<p>現在，我們有了我們所說的逆<br/>這個雙連桿機器人的運動學解決方案。</p>
<p>我們有兩個連接角的表達式，<br/>Q1 和 Q2 在末端執行器姿勢方面</p>
<p>x 和 y，以及一堆常量。</p>
<p>你注意到這兩個方程不是<br/>獨立的。</p>
<p>事實上，Q1 的方程取決於<br/>Q2 的解決方案。</p>
<p>在這種情況下，Q2 是負數，我們將<br/>用負數寫出 Q2 的解</p>
<p>符號在反余弦前面。</p>
<p>現在，我們需要解決 Q1，所以我們要<br/>介紹這個特殊的紅色三角形，</p>
<p>我們之前求解的角度β，<br/>以及用術語定義的角度伽馬</p>
<p>y 和 x。</p>
<p>現在，我們寫一個稍微不同的關系<br/>在 Q1、gamma 和 beta 之間，與什麽不同</p>
<p>我們以前有過。</p>
<p>涉及到符號的變化。</p>
<p>然後，我們可以替換之前的所有<br/>方程並提出這個表達式</p>
<p>對於 Q1。</p>
<p>同樣，這里的符號发生了變化。</p>
<p>以前，這是一個負面信號。</p>
<p>而且，這里是總結形式的解決方案<br/>對於我們的雙連桿的逆運動學</p>
<p>當機器人處於這種特定配置時，<br/>其中 Q2 為負。</p>
<p>讓我們比較兩種解決方案，案例<br/>其中 Q2 為正，Q2 為正的情況</p>
<p>是否定的。</p>
<p>影片2</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/eIZuz1XCd0w" title="YouTube video player" width="560"></iframe></p>
<p>這里我們有與我們相同的兩個鏈接機器人<br/>只是看著，但這次我們要</p>
<p>使用分析方法解決它，即<br/>我們是否會更多地依賴代數，</p>
<p>特定的線性代數而不是幾何。<br/>我們有一個表達式 E，它是齊次的</p>
<p>表示姿勢的變換<br/>機器人終結者，我們看了這個</p>
<p>在上一課中，我們可以編寫 endefector<br/>構成一個基本齊次序列</p>
<p>轉換。 Q1 的旋轉，平移<br/>沿 X 方向 A1，旋轉</p>
<p>Q2 然後在 X 方向上平移<br/>通過 A2。如果我展開這個，乘以所有</p>
<p>一起轉換，我得到了表達<br/>顯示在這里；三乘三同構變換</p>
<p>表示機器人姿態的矩陣<br/>終結者。</p>
<p>現在對於這個特殊的兩連桿機器人，我們<br/>只對它的位置感興趣</p>
<p>endefector，它是 X 和 Y 坐標，它們<br/>這兩個元素是同質的嗎</p>
<p>變換矩陣，所以我要覆制<br/>那些出來。所以這里又是我們的表達</p>
<p>對於 X 和 Y 我們要做的是<br/>一個相當常見的技巧，我們要平方</p>
<p>並添加這兩個方程，我得到了一個關系<br/>看起來像這樣。現在我可以解決</p>
<p>根據 endefector 的關節角度 Q2<br/>姿勢 X 和 Y 以及機器人的常數 A1 和 A2。</p>
<p>現在我要做的是應用總和<br/>的角度身份。我要擴展這些</p>
<p>項，Q1 的正弦加 Q2 或 Q1 的余弦加<br/>Q2 為了讓生活更輕松一點，我</p>
<p>打算建造一些變電站，所以無論在哪里<br/>我有 cos Q2，我要寫 C2 以及在哪里</p>
<p>曾經我有正弦 Q2，我要寫 S2。<br/>這是一個相當常見的速記，當人們</p>
<p>正在研究機器人運動學方程。<br/>這是制作後的方程式</p>
<p>替代品。看這兩個方程，<br/>我可以看到他們掉進了一個很好的井里</p>
<p>已知形式，對於該形式有一個非常<br/>眾所周知的解決方案。所以我要考慮</p>
<p>只是其中一個方程，方程為<br/>Y 並使用我們眾所周知的身份</p>
<p>解決方案，我可以確定<br/>變量小a、小b和小c</p>
<p>一旦我確定了這些，我就可以<br/>只需寫下 Q1 的解決方案，即</p>
<p>在這個特定的情況下相當於 theta<br/>案件。</p>
<p>這里再次是我們對 Q1 的表達式，覆制<br/>從上一張幻燈片結束，我們可能還記得</p>
<p>從我們早期的工作中我們確定<br/>這種特殊的關系； X平方加</p>
<p>Y 平方等於這個特定的覆數<br/>表達。所以我可以用和代替它</p>
<p>做一些簡化，我最終得到這個<br/>Q1 的表達式稍微簡單一些。和</p>
<p>這是我得到的相同表達<br/>上一節中的幾何方法。</p>
<p></p>
<p>W15直播</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="https://www.youtube.com/embed/WbbXqoTKe8I" width="560"></iframe></p>
<h3>week16</h3>
<p>W16_exam連結:<br/><a href="https://drive.google.com/file/d/1kWsZCiIKhfXVMegRBYjEfNoNJC0pKnRm/view" rel="nofollow">https://drive.google.com/file/d/1kWsZCiIKhfXVMegRBYjEfNoNJC0pKnRm/view</a></p>
<p>Onshape 零組件連結:<br/><a href="https://cad.onshape.com/documents/cf2463a58b9a1bed47aa230b/w/94d483d0735da6a526471e53/e/bd5cab47bc24898d1cabe337" rel="nofollow">https://cad.onshape.com/documents/cf2463a58b9a1bed47aa230b/w/94d483d0735da6a526471e53/e/bd5cab47bc24898d1cabe337</a></p>
<p>建立CoppeliaSim 4.1.0 MTB robot場景:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jLCFc6vu4sI" width="560"></iframe></p>
<p></p>
<p>手臂末端加入components-gripper-suction pad吸盤:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/cXOPkuN1I5Y" width="560"></iframe></p>
<p></p>
<p>逆向運動學函式:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GXN1wtwDJcc" width="560"></iframe></p>
<p></p>
<p>Python remote API 逆向運動學函式:<br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/zvbsc0Deqj8" width="560"></iframe></p>
<h3>week17</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/v4dkWUZq0Yc" width="560"></iframe></p>
<h1>影片</h1>
<h2>第一週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gOk4sX5HTSM" width="560"></iframe></p>
<h2>第二週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bJahDPb8U-I" width="560"></iframe></p>
<h2>第三週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/KJ6yzjJPx_8" width="560"></iframe></p>
<h2>第四週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/lewPjCuxovA" width="560"></iframe></p>
<h2>第五週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/svyfs0AM5bs" width="560"></iframe></p>
<h2>第六週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/hVyteR8R5IQ" width="560"></iframe></p>
<h2>第七週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5mbNO6haYPg" width="560"></iframe></p>
<h2>第八週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/TB_29Rfcnao" width="560"></iframe></p>
<h2>第九週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/A9relxyp5Ys" width="560"></iframe></p>
<h2>第十週</h2>
<h2>第十一週</h2>
<p>直播</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bjHveMUpdx4" width="560"></iframe></p>
<h2>第十二週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/w-PMVvAl2bg" width="560"></iframe></p>
<h2>第十三週</h2>
<p>直播</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ofpqCMmHPa8" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qZ5iF7GeW84" width="560"></iframe></p>
<p>影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gJ6Gfl1r-Mk" width="560"></iframe></p>
<h2>第十四週</h2>
<p></p>
<h2>第十五週</h2>
<p>直播</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WbbXqoTKe8I" width="560"></iframe></p>
<h2>第十六週</h2>
<p>建立CoppeliaSim 4.1.0 MTB robot場景:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="https://www.youtube.com/embed/jLCFc6vu4sI" width="560"></iframe></p>
<p></p>
<p>手臂末端加入components-gripper-suction pad吸盤:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="https://www.youtube.com/embed/cXOPkuN1I5Y" width="560"></iframe></p>
<p></p>
<p>逆向運動學函式:</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="https://www.youtube.com/embed/GXN1wtwDJcc" width="560"></iframe></p>
<p></p>
<p>Python remote API 逆向運動學函式:<br/><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="https://www.youtube.com/embed/zvbsc0Deqj8" width="560"></iframe></p>
<h2>第十七週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/v4dkWUZq0Yc" width="560"></iframe></p>
<h1>問題</h1>
<h2>stage-1</h2>
<p>問題:進行模擬時，因為輪胎和地面接觸面積不夠導致還沒向前進，就向側面倒了。</p>
<p>解決辦法:在onshape上修改，增加輪胎與地面的接觸面積。</p>
<h2>stage-2</h2>
<p>問題1:萬用軸的尺寸有誤，因此與軌道互相干涉</p>
<p><span>解決辦法:在onshape上修改，將萬用軸的尺寸修改</span></p>
<p><span></span></p>
<p><span>問題2:在模擬時門板掉落，門板跟萬象軸沒有組合</span></p>
<p><span>解決辦法:請繪圖人員進行修改</span></p>
<p><span></span></p>
<p><span>問題3:萬用輪會空轉，不會照著軌道跑</span></p>
<p><span>解決辦法:尚未解決，先請另一位同學使用soildworks模擬看看是否成功。</span></p>
<h1>W5</h1>
<p><iframe height="300" src="https://docs.google.com/spreadsheets/d/e/2PACX-1vQNIGy2NoZxWCNr0FAsbQnyffiamLURlt4ouSke9VQngPb3RdfOlB3ljCxg0BSVoFecAEfZJJLtbYoL/pubhtml?gid=0&amp;single=true&amp;widget=true&amp;headers=false" width="500"></iframe></p>